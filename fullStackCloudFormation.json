{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Static web site stack including:\n* CodeCommit Git repository\n* S3 bucket for web site content\n* Redirect from \"www.\" to base domain\n* Access logs written to logs bucket\n* ACM Certificate for SSL\n* CloudFront distributions for website https access\n* Route 53 hosted zone with DNS entries\n* CodePipeline (source CodeCommit, invoke Lambda functions)\n* S3 bucket for CodePipeline artifacts\n* AWS Lambda function(s) to generate static website from Git contents\n* AWS Lambda function to copy generated website to website S3 bucket\n* SNS topic for CodeCommit Git change notifications\n* Email address subscribed to SNS notification topic\n",
    "Parameters": {
        "DomainName": {
            "Type": "String",
            "Description": "The base domain name for the web site (no 'www')",
            "MinLength": 4,
            "MaxLength": 253,
            "AllowedPattern": "[a-z0-9]+[-.a-z0-9]*(\\.[a-z][a-z]+)+",
            "ConstraintDescription": "Provide a valid domain name using only lowercase letters, numbers, and dash (-)"
        },
        "NotificationEmail": {
            "Type": "String",
            "Description": "Initial email address to receive Git change notifications",
            "MinLength": 6,
            "AllowedPattern": ".+@[a-z0-9]+[-.a-z0-9]*(\\.[a-z][a-z]+)+",
            "ConstraintDescription": "Provide a valid email address"
        },
        "DefaultTTL": {
            "Type": "Number",
            "Description": "TTL in seconds",
            "Default": 30
        },
        "MinimumTTL": {
            "Description": "Minimum cache lifetime in seconds for the CloudFront distribution",
            "Default": 5,
            "Type": "Number"
        },
        "PriceClass": {
            "Description": "Distribution price class. Default is US-only, PriceClass_All is worldwide but more expensive.",
            "Default": "PriceClass_100",
            "AllowedValues": [
                "PriceClass_100",
                "PriceClass_200",
                "PriceClass_All"
            ],
            "Type": "String"
        },
        "GeneratorLambdaFunctionS3Bucket": {
            "Type": "String",
            "Description": "S3 bucket containing ZIP of AWS Lambda function (static site generator)",
            "Default": "run.alestic.com"
        },
        "GeneratorLambdaFunctionS3Key": {
            "Type": "String",
            "Description": "S3 key containing ZIP of AWS Lambda function (static site generator)",
            "Default": "lambda/aws-lambda-site-generator-identity.zip"
        },
        "GeneratorLambdaFunctionRuntime": {
            "Type": "String",
            "Description": "Runtime language for AWS Lambda function (static site generator)",
            "Default": "python2.7",
            "AllowedValues": [
                "python2.7",
                "nodejs",
                "nodejs4.3",
                "java8"
            ]
        },
        "GeneratorLambdaFunctionHandler": {
            "Type": "String",
            "Description": "Function Handler for AWS Lambda function (static site generator)",
            "Default": "index.handler"
        },
        "GeneratorLambdaFunctionUserParameters": {
            "Type": "String",
            "Description": "User parameters for AWS Lambda function (static site generator)",
            "Default": "unused",
            "MinLength": 1,
            "MaxLength": 1000
        },
        "SyncLambdaFunctionS3Bucket": {
            "Type": "String",
            "Description": "S3 bucket containing ZIP of AWS Lambda function (sync to S3)",
            "Default": "run.alestic.com"
        },
        "SyncLambdaFunctionS3Key": {
            "Type": "String",
            "Description": "S3 key containing ZIP of AWS Lambda function (sync to S3)",
            "Default": "lambda/aws-lambda-git-backed-static-website.zip"
        },
        "PreExistingGitRepository": {
            "Description": "Optional Git repository name for pre-existing CodeCommit repository. Leave empty to have CodeCommit Repository created and managed by this stack.",
            "Type": "String",
            "Default": ""
        },
        "PreExistingHostedZoneDomain": {
            "Description": "Optional domain name for pre-existing Route 53 hosted zone. Leave empty to have hosted zone created and managed by this stack.",
            "Type": "String",
            "Default": ""
        },
        "PreExistingSiteBucket": {
            "Description": "Optional name of pre-existing website bucket. Leave empty to have website bucket created and managed by this stack.",
            "Type": "String",
            "Default": ""
        },
        "PreExistingRedirectBucket": {
            "Description": "Optional name of pre-existing redirect bucket. Leave empty to have redirect bucket created and managed by this stack.",
            "Type": "String",
            "Default": ""
        },
        "PreExistingLogsBucket": {
            "Description": "Optional name of pre-existing access logs bucket. Leave empty to have access logs bucket created and managed by this stack.",
            "Type": "String",
            "Default": ""
        },
        "PreExistingCodePipelineBucket": {
            "Description": "Optional name of pre-existing CodePipeline artifact bucket. Leave empty to have CodePipeline bucket created and managed by this stack.",
            "Type": "String",
            "Default": ""
        }
    },
    "Conditions": {
        "NeedsNewGitRepository": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingGitRepository"
                },
                ""
            ]
        },
        "NeedsNewHostedZone": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingHostedZoneDomain"
                },
                ""
            ]
        },
        "NeedsNewSiteBucket": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingSiteBucket"
                },
                ""
            ]
        },
        "NeedsNewRedirectBucket": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingRedirectBucket"
                },
                ""
            ]
        },
        "NeedsNewLogsBucket": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingLogsBucket"
                },
                ""
            ]
        },
        "NeedsNewCodePipelineBucket": {
            "Fn::Equals": [
                {
                    "Ref": "PreExistingCodePipelineBucket"
                },
                ""
            ]
        }
    },
    "Resources": {
        "LogsBucket": {
            "Condition": "NeedsNewLogsBucket",
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "logs.${DomainName}"
                },
                "AccessControl": "LogDeliveryWrite"
            },
            "DeletionPolicy": "Retain",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f806e185-7de9-40a7-9834-2756d9f24eb8"
                }
            }
        },
        "SiteBucket": {
            "Condition": "NeedsNewSiteBucket",
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "DomainName"
                },
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html",
                    "ErrorDocument": "error.html"
                },
                "LoggingConfiguration": {
                    "DestinationBucketName": {
                        "Fn::If": [
                            "NeedsNewLogsBucket",
                            {
                                "Ref": "LogsBucket"
                            },
                            {
                                "Ref": "PreExistingLogsBucket"
                            }
                        ]
                    },
                    "LogFilePrefix": {
                        "Fn::Sub": "logs/s3/${DomainName}/"
                    }
                }
            },
            "DeletionPolicy": "Retain",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4c64779a-193f-4815-9f23-8c0901edca83"
                }
            }
        },
        "RedirectBucket": {
            "Condition": "NeedsNewRedirectBucket",
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "www.${DomainName}"
                },
                "AccessControl": "BucketOwnerFullControl",
                "LoggingConfiguration": {
                    "DestinationBucketName": {
                        "Fn::If": [
                            "NeedsNewLogsBucket",
                            {
                                "Ref": "LogsBucket"
                            },
                            {
                                "Ref": "PreExistingLogsBucket"
                            }
                        ]
                    },
                    "LogFilePrefix": {
                        "Fn::Sub": "logs/s3/www.${DomainName}/"
                    }
                },
                "WebsiteConfiguration": {
                    "RedirectAllRequestsTo": {
                        "HostName": {
                            "Ref": "DomainName"
                        },
                        "Protocol": "https"
                    }
                }
            },
            "DeletionPolicy": "Delete",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f181a0e0-ed61-48bb-9aa9-b50b3f4f8a88"
                }
            }
        },
        "CodePipelineBucket": {
            "Condition": "NeedsNewCodePipelineBucket",
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "codepipeline.${DomainName}"
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "Certificate": {
            "Type": "AWS::CertificateManager::Certificate",
            "Properties": {
                "DomainName": {
                    "Ref": "DomainName"
                },
                "SubjectAlternativeNames": [
                    {
                        "Fn::Sub": "www.${DomainName}"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "429ea62e-e809-4731-8a6b-562cfff32800"
                }
            }
        },
        "CloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Enabled": true,
                    "Aliases": [
                        {
                            "Ref": "DomainName"
                        }
                    ],
                    "DefaultRootObject": "index.html",
                    "PriceClass": {
                        "Ref": "PriceClass"
                    },
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "DomainName"
                                        },
                                        ".",
                                        {
                                            "Fn::FindInMap": [
                                                "RegionMap",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "websiteendpoint"
                                            ]
                                        }
                                    ]
                                ]
                            },
                            "Id": "S3Origin",
                            "CustomOriginConfig": {
                                "HTTPPort": 80,
                                "HTTPSPort": 443,
                                "OriginProtocolPolicy": "http-only"
                            }
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "TargetOriginId": "S3Origin",
                        "AllowedMethods": [
                            "GET",
                            "HEAD"
                        ],
                        "Compress": true,
                        "DefaultTTL": {
                            "Ref": "DefaultTTL"
                        },
                        "MinTTL": {
                            "Ref": "MinimumTTL"
                        },
                        "ForwardedValues": {
                            "QueryString": false,
                            "Cookies": {
                                "Forward": "none"
                            }
                        },
                        "ViewerProtocolPolicy": "redirect-to-https"
                    },
                    "Logging": {
                        "Bucket": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::If": [
                                            "NeedsNewLogsBucket",
                                            {
                                                "Ref": "LogsBucket"
                                            },
                                            {
                                                "Ref": "PreExistingLogsBucket"
                                            }
                                        ]
                                    },
                                    ".s3.amazonaws.com"
                                ]
                            ]
                        },
                        "Prefix": {
                            "Fn::Sub": "logs/cloudfront/${DomainName}/"
                        },
                        "IncludeCookies": false
                    },
                    "ViewerCertificate": {
                        "AcmCertificateArn": {
                            "Ref": "Certificate"
                        },
                        "SslSupportMethod": "sni-only"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0f095c59-0e61-42a9-9d76-31e86175f023"
                }
            }
        },
        "RedirectCloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Enabled": true,
                    "Aliases": [
                        {
                            "Fn::If": [
                                "NeedsNewRedirectBucket",
                                {
                                    "Ref": "RedirectBucket"
                                },
                                {
                                    "Ref": "PreExistingRedirectBucket"
                                }
                            ]
                        }
                    ],
                    "PriceClass": "PriceClass_100",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::If": [
                                                "NeedsNewRedirectBucket",
                                                {
                                                    "Ref": "RedirectBucket"
                                                },
                                                {
                                                    "Ref": "PreExistingRedirectBucket"
                                                }
                                            ]
                                        },
                                        ".",
                                        {
                                            "Fn::FindInMap": [
                                                "RegionMap",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "websiteendpoint"
                                            ]
                                        }
                                    ]
                                ]
                            },
                            "Id": "RedirectS3Origin",
                            "CustomOriginConfig": {
                                "HTTPPort": 80,
                                "HTTPSPort": 443,
                                "OriginProtocolPolicy": "http-only"
                            }
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "TargetOriginId": "RedirectS3Origin",
                        "AllowedMethods": [
                            "GET",
                            "HEAD"
                        ],
                        "DefaultTTL": {
                            "Ref": "DefaultTTL"
                        },
                        "MinTTL": {
                            "Ref": "MinimumTTL"
                        },
                        "ForwardedValues": {
                            "QueryString": false,
                            "Cookies": {
                                "Forward": "none"
                            }
                        },
                        "ViewerProtocolPolicy": "allow-all"
                    },
                    "Logging": {
                        "Bucket": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::If": [
                                            "NeedsNewLogsBucket",
                                            {
                                                "Ref": "LogsBucket"
                                            },
                                            {
                                                "Ref": "PreExistingLogsBucket"
                                            }
                                        ]
                                    },
                                    ".s3.amazonaws.com"
                                ]
                            ]
                        },
                        "Prefix": {
                            "Fn::Sub": "logs/cloudfront/www.${DomainName}/"
                        },
                        "IncludeCookies": false
                    },
                    "ViewerCertificate": {
                        "AcmCertificateArn": {
                            "Ref": "Certificate"
                        },
                        "SslSupportMethod": "sni-only"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0951dbff-da8e-437d-8d0b-b7c1fca16d33"
                }
            }
        },
        "Route53HostedZone": {
            "Condition": "NeedsNewHostedZone",
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": {
                        "Fn::Sub": "Created by CloudFormation stack: ${AWS::StackName}"
                    }
                },
                "Name": {
                    "Ref": "DomainName"
                }
            },
            "DeletionPolicy": "Retain",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "59912405-1f17-4688-9f8c-53c151aad6ef"
                }
            }
        },
        "Route53RecordSetGroup": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneId": {
                    "Fn::If": [
                        "NeedsNewHostedZone",
                        {
                            "Ref": "Route53HostedZone"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "HostedZoneName": {
                    "Fn::If": [
                        "NeedsNewHostedZone",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Fn::Sub": "${PreExistingHostedZoneDomain}."
                        }
                    ]
                },
                "RecordSets": [
                    {
                        "Name": {
                            "Fn::Sub": "${DomainName}."
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": "Z2FDTNDATAQYW2",
                            "DNSName": {
                                "Fn::GetAtt": [
                                    "CloudFrontDistribution",
                                    "DomainName"
                                ]
                            }
                        }
                    },
                    {
                        "Name": {
                            "Fn::Sub": "www.${DomainName}."
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": "Z2FDTNDATAQYW2",
                            "DNSName": {
                                "Fn::GetAtt": [
                                    "RedirectCloudFrontDistribution",
                                    "DomainName"
                                ]
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fa80fb60-fac4-45d4-9c9a-438899f71cc2"
                }
            }
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Fn::Sub": "Activity in ${DomainName} Git repository"
                },
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "NotificationEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a0f908e4-0611-427b-bb70-50af1dfade8d"
                }
            }
        },
        "GitRepository": {
            "Condition": "NeedsNewGitRepository",
            "Type": "AWS::CodeCommit::Repository",
            "Properties": {
                "RepositoryDescription": {
                    "Fn::Sub": "Git repository for ${DomainName}"
                },
                "RepositoryName": {
                    "Ref": "DomainName"
                },
                "Triggers": [
                    {
                        "Name": {
                            "Fn::Sub": "Activity in ${DomainName} Git repository"
                        },
                        "DestinationArn": {
                            "Ref": "NotificationTopic"
                        },
                        "Events": [
                            "all"
                        ]
                    }
                ]
            },
            "DeletionPolicy": "Retain",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "21bfb08c-d70d-48b6-8713-0e0839f8f27c"
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Sub": "${DomainName}-execution-policy"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "logs:*",
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:PutJobSuccessResult",
                                        "codepipeline:PutJobFailureResult"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If": [
                                                            "NeedsNewSiteBucket",
                                                            {
                                                                "Ref": "SiteBucket"
                                                            },
                                                            {
                                                                "Ref": "PreExistingSiteBucket"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If": [
                                                            "NeedsNewCodePipelineBucket",
                                                            {
                                                                "Ref": "CodePipelineBucket"
                                                            },
                                                            {
                                                                "Ref": "PreExistingCodePipelineBucket"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:DeleteObject",
                                        "s3:GetObject",
                                        "s3:GetObjectAcl",
                                        "s3:ListMultipartUploadParts",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If": [
                                                            "NeedsNewSiteBucket",
                                                            {
                                                                "Ref": "SiteBucket"
                                                            },
                                                            {
                                                                "Ref": "PreExistingSiteBucket"
                                                            }
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If": [
                                                            "NeedsNewCodePipelineBucket",
                                                            {
                                                                "Ref": "CodePipelineBucket"
                                                            },
                                                            {
                                                                "Ref": "PreExistingCodePipelineBucket"
                                                            }
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0c6f0953-ad54-4811-9225-88ad3c635db4"
                }
            }
        },
        "GeneratorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": {
                    "Fn::Sub": "Static site generator for ${DomainName}"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "MemorySize": 1536,
                "Timeout": 300,
                "Runtime": {
                    "Ref": "GeneratorLambdaFunctionRuntime"
                },
                "Handler": {
                    "Ref": "GeneratorLambdaFunctionHandler"
                },
                "Code": {
                    "S3Bucket": {
                        "Ref": "GeneratorLambdaFunctionS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "GeneratorLambdaFunctionS3Key"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b222a8d4-ef16-4716-a102-944c4119585f"
                }
            }
        },
        "SyncLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": {
                    "Fn::Sub": "Copy Git branch contents to S3 bucket for ${DomainName}"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "MemorySize": 1536,
                "Timeout": 300,
                "Runtime": "python2.7",
                "Handler": "index.handler",
                "Code": {
                    "S3Bucket": {
                        "Ref": "SyncLambdaFunctionS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "SyncLambdaFunctionS3Key"
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3f485f1d-1a10-48f6-ad95-6861d09c3d01"
                }
            }
        },
        "CodePipelineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    "codepipeline.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "codepipeline-service",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d56b7131-adb3-4d1b-b790-501b87c7592f"
                }
            }
        },
        "CodePipeline": {
            "Type": "AWS::CodePipeline::Pipeline",
            "Properties": {
                "Name": {
                    "Fn::Sub": "${DomainName}-codepipeline"
                },
                "ArtifactStore": {
                    "Type": "S3",
                    "Location": {
                        "Fn::If": [
                            "NeedsNewCodePipelineBucket",
                            {
                                "Ref": "CodePipelineBucket"
                            },
                            {
                                "Ref": "PreExistingCodePipelineBucket"
                            }
                        ]
                    }
                },
                "RestartExecutionOnUpdate": false,
                "RoleArn": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${CodePipelineRole}"
                },
                "Stages": [
                    {
                        "Name": "Source",
                        "Actions": [
                            {
                                "Name": "SourceAction",
                                "ActionTypeId": {
                                    "Category": "Source",
                                    "Owner": "AWS",
                                    "Provider": "CodeCommit",
                                    "Version": 1
                                },
                                "Configuration": {
                                    "RepositoryName": {
                                        "Fn::If": [
                                            "NeedsNewGitRepository",
                                            {
                                                "Ref": "DomainName"
                                            },
                                            {
                                                "Ref": "PreExistingGitRepository"
                                            }
                                        ]
                                    },
                                    "BranchName": "master"
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "SiteSource"
                                    }
                                ],
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "InvokeGenerator",
                        "Actions": [
                            {
                                "Name": "InvokeAction",
                                "InputArtifacts": [
                                    {
                                        "Name": "SiteSource"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Provider": "Lambda",
                                    "Version": 1
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "GeneratorLambdaFunction"
                                    },
                                    "UserParameters": {
                                        "Ref": "GeneratorLambdaFunctionUserParameters"
                                    }
                                },
                                "OutputArtifacts": [
                                    {
                                        "Name": "SiteContent"
                                    }
                                ],
                                "RunOrder": 1
                            }
                        ]
                    },
                    {
                        "Name": "InvokeSync",
                        "Actions": [
                            {
                                "Name": "InvokeAction",
                                "InputArtifacts": [
                                    {
                                        "Name": "SiteContent"
                                    }
                                ],
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Provider": "Lambda",
                                    "Version": 1
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "SyncLambdaFunction"
                                    },
                                    "UserParameters": {
                                        "Fn::If": [
                                            "NeedsNewSiteBucket",
                                            {
                                                "Ref": "SiteBucket"
                                            },
                                            {
                                                "Ref": "PreExistingSiteBucket"
                                            }
                                        ]
                                    }
                                },
                                "RunOrder": 1
                            }
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "bce1d882-ff95-4df7-bc28-64382074fedd"
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "S3hostedzoneID": "Z2M4EHUR26P7ZW",
                "websiteendpoint": "s3-website-ap-northeast-1.amazonaws.com"
            },
            "ap-northeast-2": {
                "S3hostedzoneID": "Z3W03O7B5YMIYP",
                "websiteendpoint": "s3-website.ap-northeast-2.amazonaws.com"
            },
            "ap-south-1": {
                "S3hostedzoneID": "Z11RGJOFQNVJUP",
                "websiteendpoint": "s3-website.ap-south-1.amazonaws.com"
            },
            "ap-southeast-1": {
                "S3hostedzoneID": "Z3O0J2DXBE1FTB",
                "websiteendpoint": "s3-website-ap-southeast-1.amazonaws.com"
            },
            "ap-southeast-2": {
                "S3hostedzoneID": "Z1WCIGYICN2BYD",
                "websiteendpoint": "s3-website-ap-southeast-2.amazonaws.com"
            },
            "eu-central-1": {
                "S3hostedzoneID": "Z21DNDUVLTQW6Q",
                "websiteendpoint": "s3-website.eu-central-1.amazonaws.com"
            },
            "eu-west-1": {
                "S3hostedzoneID": "Z1BKCTXD74EZPE",
                "websiteendpoint": "s3-website-eu-west-1.amazonaws.com"
            },
            "sa-east-1": {
                "S3hostedzoneID": "Z7KQH4QJS55SO",
                "websiteendpoint": "s3-website-sa-east-1.amazonaws.com"
            },
            "us-east-1": {
                "S3hostedzoneID": "Z3AQBSTGFYJSTF",
                "websiteendpoint": "s3-website-us-east-1.amazonaws.com"
            },
            "us-east-2": {
                "S3hostedzoneID": "Z2O1EMRO9K5GLX",
                "websiteendpoint": "s3-website.us-east-2.amazonaws.com"
            },
            "us-west-1": {
                "S3hostedzoneID": "Z2F56UZL2M1ACD",
                "websiteendpoint": "s3-website-us-west-1.amazonaws.com"
            },
            "us-west-2": {
                "S3hostedzoneID": "Z3BJ6K6RIION7M",
                "websiteendpoint": "s3-website-us-west-2.amazonaws.com"
            }
        }
    },
    "Outputs": {
        "DomainName": {
            "Description": "Domain name",
            "Value": {
                "Ref": "DomainName"
            }
        },
        "RedirectDomainName": {
            "Description": "Redirect hostname",
            "Value": {
                "Fn::If": [
                    "NeedsNewRedirectBucket",
                    {
                        "Ref": "RedirectBucket"
                    },
                    {
                        "Ref": "PreExistingRedirectBucket"
                    }
                ]
            }
        },
        "SiteBucket": {
            "Value": {
                "Fn::If": [
                    "NeedsNewSiteBucket",
                    {
                        "Ref": "SiteBucket"
                    },
                    {
                        "Ref": "PreExistingSiteBucket"
                    }
                ]
            }
        },
        "RedirectBucket": {
            "Value": {
                "Fn::If": [
                    "NeedsNewRedirectBucket",
                    {
                        "Ref": "RedirectBucket"
                    },
                    {
                        "Ref": "PreExistingRedirectBucket"
                    }
                ]
            }
        },
        "LogsBucket": {
            "Description": "S3 Bucket with access logs",
            "Value": {
                "Fn::If": [
                    "NeedsNewLogsBucket",
                    {
                        "Ref": "LogsBucket"
                    },
                    {
                        "Ref": "PreExistingLogsBucket"
                    }
                ]
            }
        },
        "HostedZoneId": {
            "Description": "Route 53 Hosted Zone id",
            "Value": {
                "Fn::If": [
                    "NeedsNewHostedZone",
                    {
                        "Ref": "Route53HostedZone"
                    },
                    "N/A"
                ]
            }
        },
        "CloudFrontDomain": {
            "Description": "CloudFront distribution domain name",
            "Value": {
                "Ref": "CloudFrontDistribution"
            }
        },
        "RedirectCloudFrontDomain": {
            "Description": "Redirect CloudFront distribution domain name",
            "Value": {
                "Ref": "RedirectCloudFrontDistribution"
            }
        },
        "CodePipelineArn": {
            "Description": "CodePipeline ARN",
            "Value": {
                "Ref": "CodePipeline"
            }
        },
        "GitRepositoryName": {
            "Description": "Git repository name",
            "Value": {
                "Fn::If": [
                    "NeedsNewGitRepository",
                    {
                        "Ref": "DomainName"
                    },
                    {
                        "Ref": "PreExistingGitRepository"
                    }
                ]
            }
        },
        "GitCloneUrlHttp": {
            "Description": "Git https clone endpoint",
            "Value": {
                "Fn::If": [
                    "NeedsNewGitRepository",
                    {
                        "Fn::GetAtt": [
                            "GitRepository",
                            "CloneUrlHttp"
                        ]
                    },
                    "N/A"
                ]
            }
        },
        "GitCloneUrlSsh": {
            "Description": "Git ssh clone endpoint",
            "Value": {
                "Fn::If": [
                    "NeedsNewGitRepository",
                    {
                        "Fn::GetAtt": [
                            "GitRepository",
                            "CloneUrlSsh"
                        ]
                    },
                    "N/A"
                ]
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Website and Git repository"
                    },
                    "Parameters": [
                        "DomainName"
                    ]
                },
                {
                    "Label": {
                        "default": "Git Activity"
                    },
                    "Parameters": [
                        "NotificationEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Lambda Function (static site generator)"
                    },
                    "Parameters": [
                        "GeneratorLambdaFunctionS3Bucket",
                        "GeneratorLambdaFunctionS3Key",
                        "GeneratorLambdaFunctionRuntime",
                        "GeneratorLambdaFunctionHandler",
                        "GeneratorLambdaFunctionUserParameters"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Lambda Function (Sync to S3)"
                    },
                    "Parameters": [
                        "SyncLambdaFunctionS3Bucket",
                        "SyncLambdaFunctionS3Key"
                    ]
                },
                {
                    "Label": {
                        "default": "CloudFront CDN"
                    },
                    "Parameters": [
                        "PriceClass",
                        "MinimumTTL",
                        "DefaultTTL"
                    ]
                },
                {
                    "Label": {
                        "default": "PreExisting Resources To Use (Leave empty for stack to create and manage)"
                    },
                    "Parameters": [
                        "PreExistingGitRepository",
                        "PreExistingHostedZoneDomain",
                        "PreExistingSiteBucket",
                        "PreExistingRedirectBucket",
                        "PreExistingLogsBucket",
                        "PreExistingCodePipelineBucket"
                    ]
                }
            ]
        },
        "AWS::CloudFormation::Designer": {
            "d56b7131-adb3-4d1b-b790-501b87c7592f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 270,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "a0f908e4-0611-427b-bb70-50af1dfade8d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 270,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "21bfb08c-d70d-48b6-8713-0e0839f8f27c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 300
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "a0f908e4-0611-427b-bb70-50af1dfade8d"
                ]
            },
            "59912405-1f17-4688-9f8c-53c151aad6ef": {
                "size": {
                    "width": 150,
                    "height": 150
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "429ea62e-e809-4731-8a6b-562cfff32800": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 390,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "ab699a7c-53bb-4d8e-9f1e-5764ed9162fd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 390,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "f806e185-7de9-40a7-9834-2756d9f24eb8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "0f095c59-0e61-42a9-9d76-31e86175f023": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "f806e185-7de9-40a7-9834-2756d9f24eb8",
                    "429ea62e-e809-4731-8a6b-562cfff32800"
                ]
            },
            "f181a0e0-ed61-48bb-9aa9-b50b3f4f8a88": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "f806e185-7de9-40a7-9834-2756d9f24eb8"
                ]
            },
            "0951dbff-da8e-437d-8d0b-b7c1fca16d33": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 420
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "f181a0e0-ed61-48bb-9aa9-b50b3f4f8a88",
                    "f806e185-7de9-40a7-9834-2756d9f24eb8",
                    "429ea62e-e809-4731-8a6b-562cfff32800"
                ]
            },
            "fa80fb60-fac4-45d4-9c9a-438899f71cc2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 450
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "0f095c59-0e61-42a9-9d76-31e86175f023",
                    "0951dbff-da8e-437d-8d0b-b7c1fca16d33"
                ]
            },
            "4c64779a-193f-4815-9f23-8c0901edca83": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 450
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "f806e185-7de9-40a7-9834-2756d9f24eb8"
                ]
            },
            "0c6f0953-ad54-4811-9225-88ad3c635db4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 450
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "4c64779a-193f-4815-9f23-8c0901edca83",
                    "ab699a7c-53bb-4d8e-9f1e-5764ed9162fd"
                ]
            },
            "3f485f1d-1a10-48f6-ad95-6861d09c3d01": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 510,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "0c6f0953-ad54-4811-9225-88ad3c635db4"
                ]
            },
            "b222a8d4-ef16-4716-a102-944c4119585f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 510,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "0c6f0953-ad54-4811-9225-88ad3c635db4"
                ]
            },
            "bce1d882-ff95-4df7-bc28-64382074fedd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isrelatedto": [
                    "ab699a7c-53bb-4d8e-9f1e-5764ed9162fd",
                    "b222a8d4-ef16-4716-a102-944c4119585f",
                    "3f485f1d-1a10-48f6-ad95-6861d09c3d01",
                    "4c64779a-193f-4815-9f23-8c0901edca83"
                ]
            }
        }
    }
}